    A Message Queue (MQ) is a communication mechanism used to exchange messages between distributed systems or components in a decoupled way.
It allows different services or systems to send and receive messages asynchronously. A message queue can buffer messages,
decouple producers from consumers, and ensure reliable message delivery, even in cases of system failures.

    When designing a message queue at a low level in Java, there are several important considerations and components.
Below is a high-level approach to designing a basic Message Queue System (without the complexities of advanced features like
message persistence, fault tolerance, or advanced routing). We'll focus on a simplified in-memory message queue.

##Key Concepts:
1. Producer: A thread or component that sends messages to the queue.
2. Consumer: A thread or component that retrieves and processes messages from the queue.
3. Message: The data being transmitted between producer and consumer.
4. Queue: A data structure (usually a FIFO queue) used to hold the messages.

##Requirements:
1. FIFO Order: Messages should be processed in the order they are added to the queue.
2. Concurrency: Producers and consumers can work in parallel. Proper synchronization is required to handle concurrent access.
3. Blocking and Timeout: Consumers should block if the queue is empty (or with a timeout). Similarly, producers should block if the queue is full (or with a timeout).
4. Message Acknowledgement: After a consumer successfully processes a message, it should acknowledge the message.